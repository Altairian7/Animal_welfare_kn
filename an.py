import cv2
from ultralytics import YOLO
import requests
from time import time, sleep
from datetime import datetime
import json

# --------------------
# Load YOLOv8 model
# --------------------
print("üì¶ Loading YOLOv8 model...")
device = "mps" if cv2.ocl.haveOpenCL() else "cpu"
model = YOLO("yolov8s.pt")
model.to(device)

# Set confidence threshold to 80%
CONF_THRESHOLD = 0.8

# --------------------
# Initialize Webcam (force AVFoundation for macOS)
# --------------------
print("üé• Initializing camera...")
cap = cv2.VideoCapture(0, cv2.CAP_AVFOUNDATION)

if not cap.isOpened():
    print("‚ùå Error: Could not open webcam. Check permissions in System Settings > Privacy & Security > Camera.")
    exit()

cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

print("üöÄ Animal detection started. Press 'q' to quit.")

# --------------------
# Settings
# --------------------
API_BASE_URL = "https://karunanidhan.app"
API_URL = f"{API_BASE_URL}/reports/minki/"

USER_ID = "12345"  # ‚úÖ Replace with your actual user_id

ANIMALS = ['dog', 'cat', 'bird', 'cow', 'sheep', 'horse']
COOLDOWN = 5
last_sent = 0

CURRENT_LATITUDE = 28.465796
CURRENT_LONGITUDE = 77.482884

try:
    while True:
        ret, frame = cap.read()

        # Debug: check if frame is received
        if not ret:
            print("‚ö†Ô∏è Can't receive frame (stream end?). Skipping this loop...")
            sleep(1)
            continue
        else:
            print("‚úÖ Frame received:", frame.shape)

        # Run YOLOv8 inference
        results = model(frame, verbose=False)[0]

        detected = False
        detected_animals = []

        for box in results.boxes:
            cls = int(box.cls[0])
            conf = float(box.conf[0])
            label = model.names[cls]

            if conf >= CONF_THRESHOLD and label in ANIMALS:
                detected = True
                detected_animals.append(label)

                x1, y1, x2, y2 = map(int, box.xyxy[0])
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.putText(frame, f"{label} {conf:.2f}", (x1, y1 - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

        # Send report if detected and cooldown passed
        if detected and (time() - last_sent > COOLDOWN):
            filename = f"detected_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
            cv2.imwrite(filename, frame)

            try:
                with open(filename, 'rb') as f:
                    files = {'image': (filename, f, 'image/jpeg')}
                    data = {
                        'user_id': USER_ID,
                        'title': f'Automatic report of {", ".join(set(detected_animals))}',
                        'description': 'This report was automatically generated by a camera detecting an animal.',
                        'species': json.dumps(list(set(detected_animals))),
                        'location': json.dumps({
                            'latitude': CURRENT_LATITUDE,
                            'longitude': CURRENT_LONGITUDE
                        }),
                        'severity': 'medium',
                    }
                    response = requests.post(API_URL, files=files, data=data)
                    print(f"üì§ Sent {filename} ‚Üí API Response: {response.status_code}")
                    print(f"Response body: {response.text}")

            except Exception as e:
                print(f"‚ùå Failed to send image or create report: {e}")

            print("‚è≥ Pausing for 10 seconds before next attempt...")
            sleep(10)
            last_sent = time()

        # Show camera feed
        cv2.imshow("üêæ Animal Detection Feed", frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    print("\nüõë Stopped by user (Ctrl+C).")

finally:
    cap.release()
    cv2.destroyAllWindows()
